Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/11/22 15:50:30
5String Primitives and Macros     (Proj6_clarkeab.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_clarkeab.asm)

				; Author: Abby Clarke 
				; Last Modified: 3/11/2022
				; OSU email address: clarkeab@oregonstate.edu
				; Course number/section:   CS271 Section 02
				; Project Number: 6                Due Date: 3/13/2022
				; Description: This program gets 10 integers from user as strings, validates the integers based on size/characters, converts the string form to 
				; integer in SDWORD, and stores these integers in an array. Then the program calculates the sum and truncated average in main. To display the list
				; of numbers, sum, and average, the program calls a procedure to convert the integers to ascii string form so they can be displayed as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; -------------------------------------------------------------------
				; Name: mGetString
				;
				; Description: Displays a prompt to enter a signed number then gets user's input into a memory location. Records how many bytes are entered.
				;
				; Preconditions: prompt exists, string exists, length of string specified
				;
				; Receives: prompt (Offset of a prompt), userString (offset of empty string), size (length of string- input value), bytesRead (offset)
				;
				; Returns: filled string, number of bytes read in string
				; -------------------------------------------------------------------
				mGetString	MACRO prompt, userString, size, bytesRead
				  push	EAX
				  push	ECX
				  push	EDX
				  push	EDI
				  
				  mov	EDX, prompt
				  call	WriteString
				  mov	ECX, size
				  mov	EDX, userString
				  call	ReadString
				  mov	EDI, bytesRead
				  mov	[EDI], EAX

				  pop	EDI
				  pop	EDX
				  pop	ECX
				  pop	EAX
				ENDM

				; -------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Description: Prints a given string.
				;
				; Preconditions: string exists.
				;
				; Receives: printString (Offset of string to be printed)
				;
				; Returns: Displays string.
				; -------------------------------------------------------------------
				mDisplayString	MACRO	printString
				  push	EAX
				  push	EDX

				  mov	EDX, printString
				  call	WriteString

				  pop EDX
				  pop EAX
				ENDM



 00000000			.data
 00000000 50 6C 65 61 73	prompt1		BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000001F  000000C8 [		string1		BYTE	200 DUP(?)
	    00
	   ]
 000000E7  000000C8 [		string2		BYTE	200 DUP(?)
	    00
	   ]
 000001AF  000000C8 [		listNums	SBYTE	200 DUP(?)
	    00
	   ]
 00000277 00000020		sMax		DWORD	32
 0000027B 00000000		sLength		DWORD	?
 0000027F 00000000		newInt		SDWORD	?
 00000283 45 52 52 4F 52	errorMsg	BYTE	"ERROR: You did not enter a signed number or your number was too big.", 13,10
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
 000002C9  50 6C 65 61 73				BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000002DC 00000000		counter		DWORD	?
 000002E0 59 6F 75 20 65	yourNums	BYTE	"You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 00000306 54 68 65 20 73	yourSum		BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000324 54 68 65 20 74	yourAvg		BYTE	"The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000033F 00000000		numSum		SDWORD	?
 00000343 00000000		numAvg		SDWORD  ?
 00000347 50 72 6F 67 72	titleinstr	BYTE	"Programming Assignment 6: String Primitives and Macros",13,10
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 0D
	   0A
 0000037F  57 72 69 74 74				BYTE	"Written by: Abby Clarke", 13,10,13,10
	   65 6E 20 62 79
	   3A 20 41 62 62
	   79 20 43 6C 61
	   72 6B 65 0D 0A
	   0D 0A
 0000039A  50 6C 65 61 73				BYTE	"Please provide 10 signed decimal integers.",13,10
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 000003C6  45 61 63 68 20				BYTE	"Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 0D
	   0A
 00000430  74 68 65 20 72				BYTE	"the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,13,10,0
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 0D 0A 00
 0000048F 54 68 61 6E 6B	goodBye		BYTE	"Thanks for playing!",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00




 00000000			.code
 00000000			main PROC

				; -------------------------------------------------------------------------
				; Main procedure will introduce program, receieve 10 valid integers from user,
				; store integers in an array, calculate total sum and truncated average, and
				; display chosen integers/sum/average. Uses procedures ReadVal and WriteVal.
				; Does not use readInt, readDec, writeInt, writeDec.
				; -------------------------------------------------------------------------
				  
				;title and instructions
				  mDisplayString	OFFSET titleinstr
 00000000  50		     1	  push	EAX
 00000001  52		     1	  push	EDX
 00000002  BA 00000347 R     1	  mov	EDX, OFFSET titleinstr
 00000007  E8 00000000 E     1	  call	WriteString
 0000000C  5A		     1	  pop EDX
 0000000D  58		     1	  pop EAX
				  

				;prompt user for 10 numbers  
 0000000E  C7 05 000002DC R	  mov	counter, 10
	   0000000A
 00000018  BF 000001AF R	  mov	EDI, OFFSET listNums
 0000001D			_get10Nums:
 0000001D  68 00000283 R	  push	OFFSET errorMsg
 00000022  68 0000027F R	  push	OFFSET newInt
 00000027  68 00000000 R	  push	OFFSET prompt1
 0000002C  68 0000001F R	  push	OFFSET string1
 00000031  FF 35 00000277 R	  push	sMax
 00000037  68 0000027B R	  push	OFFSET sLength
 0000003C  E8 00000110		  call	ReadVal
				;add integer to list of 10 integers from user
 00000041  A1 0000027F R	  mov	EAX, newInt
 00000046  89 07		  mov	[EDI], EAX
 00000048  83 C7 04		  add	EDI, 4
 0000004B  FF 0D 000002DC R	  dec	counter
 00000051  83 3D 000002DC R	  cmp	counter, 0
	   00
 00000058  7F C3		  jg	_get10Nums
 0000005A  E8 00000000 E	  call	CrLf


				;display the integers  
				  mDisplayString	OFFSET yourNums
 0000005F  50		     1	  push	EAX
 00000060  52		     1	  push	EDX
 00000061  BA 000002E0 R     1	  mov	EDX, OFFSET yourNums
 00000066  E8 00000000 E     1	  call	WriteString
 0000006B  5A		     1	  pop EDX
 0000006C  58		     1	  pop EAX
				 
				;convert each int in listNums to ascii string
 0000006D  BE 000001AF R	  mov	ESI, OFFSET listNums
 00000072  C7 05 000002DC R	  mov	counter, 10
	   0000000A
 0000007C			_display10Nums:
 0000007C  8B 06		  mov	EAX, [ESI]
 0000007E  A3 0000027F R	  mov	newInt, EAX
 00000083  68 000000E7 R	  push	OFFSET string2
 00000088  FF 35 0000027F R	  push	newInt
 0000008E  E8 000001BB		  call	WriteVal
 00000093  B0 20		  mov	AL, 32
 00000095  E8 00000000 E	  call	WriteChar
 0000009A  83 C6 04		  add	ESI, 4
 0000009D  FF 0D 000002DC R	  dec	counter
 000000A3  83 3D 000002DC R	  cmp	counter, 0
	   00
 000000AA  7F D0		  jg	_display10Nums
 000000AC  E8 00000000 E	  call	CrLf


				;calculate the sum
 000000B1  BE 000001AF R	  mov	ESI, OFFSET listNums
 000000B6  BF 0000033F R	  mov	EDI, OFFSET numSum
 000000BB  C7 05 000002DC R	  mov	counter, 9
	   00000009
 000000C5  8B 06		  mov	EAX, [ESI]
 000000C7			_sumLoop:
 000000C7  83 C6 04		  add	ESI, 4
 000000CA  8B 1E		  mov	EBX, [ESI]
 000000CC  03 C3		  add	EAX, EBX
 000000CE  FF 0D 000002DC R	  dec	counter
 000000D4  83 3D 000002DC R	  cmp	counter, 0
	   00
 000000DB  7F EA		  jg	_sumLoop
 000000DD  89 07		  mov	[EDI], EAX


				;display the sum
				  mDisplayString	OFFSET yourSum
 000000DF  50		     1	  push	EAX
 000000E0  52		     1	  push	EDX
 000000E1  BA 00000306 R     1	  mov	EDX, OFFSET yourSum
 000000E6  E8 00000000 E     1	  call	WriteString
 000000EB  5A		     1	  pop EDX
 000000EC  58		     1	  pop EAX
				  
 000000ED  68 000000E7 R	  push	OFFSET string2
 000000F2  FF 35 0000033F R	  push	numSum
 000000F8  E8 00000151		  call	WriteVal
 000000FD  E8 00000000 E	  call	CrLf


				;calculate the average
 00000102  A1 0000033F R	  mov	EAX, numSum
 00000107  99			  cdq
 00000108  BB 0000000A		  mov	EBX, 10
 0000010D  F7 FB		  idiv	EBX
 0000010F  A3 00000343 R	  mov	numAvg, EAX

				;display the average
				  mDisplayString	OFFSET yourAvg
 00000114  50		     1	  push	EAX
 00000115  52		     1	  push	EDX
 00000116  BA 00000324 R     1	  mov	EDX, OFFSET yourAvg
 0000011B  E8 00000000 E     1	  call	WriteString
 00000120  5A		     1	  pop EDX
 00000121  58		     1	  pop EAX
				  
 00000122  68 000000E7 R	  push	OFFSET string2
 00000127  FF 35 00000343 R	  push	numAvg
 0000012D  E8 0000011C		  call	WriteVal
 00000132  E8 00000000 E	  call	CrLf
 00000137  E8 00000000 E	  call	CrLf

				;goodbye
				  mDisplayString	OFFSET goodBye
 0000013C  50		     1	  push	EAX
 0000013D  52		     1	  push	EDX
 0000013E  BA 0000048F R     1	  mov	EDX, OFFSET goodBye
 00000143  E8 00000000 E     1	  call	WriteString
 00000148  5A		     1	  pop EDX
 00000149  58		     1	  pop EAX
				  

					Invoke ExitProcess,0	; exit to operating system
 0000014A  6A 00	   *	    push   +000000000h
 0000014C  E8 00000000 E   *	    call   ExitProcess
 00000151			main ENDP


				; ------------------------------------------------------------
				; name: ReadVal

				; description: ReadVal uses mGetString maco to get user input in form of a string of digits. It converts the string of 
				; ascii digits to its numeric value representation in a SDOWRD. It validates the user's input is a valid number (no letters, symbols)
				; and ensures it fits in an SDWORD without overflow.
				;
				; preconditions: ebp+8 = Offset sLength, ebp+12 = sMax, ebp+16 = offset string1, ebp+20=offset prompt1, ebp+24=offset newInt,
				; ebp+28= offset errorMsg
				;
				; postconditions: newInt value changed. registers preserved.
				;
				; receives: (listed above) offset sLength, sMax, offset string1, offset prompt1, offset newInt, offset errorMsg
				;
				; returns: converted value in SDWORD newInt
				; ---------------------------------------------------------------
 00000151			ReadVal PROC
				  LOCAL	signFlag: DWORD, multiply: DWORD			; signFlag: 0 for positive, 1 for negative
 00000151  55		   *	    push   ebp
 00000152  8B EC	   *	    mov    ebp, esp
 00000154  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000157  50			  push	EAX
 00000158  53			  push	EBX
 00000159  51			  push	ECX
 0000015A  52			  push	EDX
 0000015B  57			  push	EDI
 0000015C  56			  push	ESI
				; ---------------------------------------------------------------- 
				; This procedure calls macro mGetString and prompts user to enter an integer.
				; The procedure verifies that the integer is within range (no overflow/carry) and
				; contains correct characters, then converts ascii characters to integers. It starts
				; with smallest digit by setting direction flag to go backwards, and multiplies by 1, 10,
				; 100, 1000, etc. and adds each new value to the SDWORD newInt. If number is invalid,
				; procedure does not store number and calls macro again with error message, prompting user
				; for new number.
				; ----------------------------------------------------------------
 0000015D  C7 45 FC		  mov	signFlag, 0
	   00000000
 00000164  C7 45 F8		  mov	multiply, 1									; will increase by 10s
	   00000001
				  mGetString	[EBP + 20], [EBP + 16], [EBP + 12], [EBP + 8]
 0000016B  50		     1	  push	EAX
 0000016C  51		     1	  push	ECX
 0000016D  52		     1	  push	EDX
 0000016E  57		     1	  push	EDI
 0000016F  8B 55 14	     1	  mov	EDX, [EBP + 20]
 00000172  E8 00000000 E     1	  call	WriteString
 00000177  8B 4D 0C	     1	  mov	ECX, [EBP + 12]
 0000017A  8B 55 10	     1	  mov	EDX, [EBP + 16]
 0000017D  E8 00000000 E     1	  call	ReadString
 00000182  8B 7D 08	     1	  mov	EDI, [EBP + 8]
 00000185  89 07	     1	  mov	[EDI], EAX
 00000187  5F		     1	  pop	EDI
 00000188  5A		     1	  pop	EDX
 00000189  59		     1	  pop	ECX
 0000018A  58		     1	  pop	EAX
				  
 0000018B			_start_over:  
 0000018B  C7 45 F8		  mov	multiply, 1
	   00000001
 00000192  C7 45 FC		  mov	signFlag, 0
	   00000000
 00000199  8B 55 08		  mov	EDX, [EBP + 8]
 0000019C  8B 0A		  mov	ECX, [EDX]
 0000019E  8B 75 10		  mov	ESI, [EBP + 16]
 000001A1  03 F1		  add	ESI, ECX
 000001A3  4E			  dec	ESI
 000001A4  8B 7D 18		  mov	EDI, [EBP + 24]
 000001A7  B8 00000000		  mov	EAX, 0
 000001AC  89 07		  mov	[EDI], EAX			;clear newInt 
 000001AE  8B 5D F8		  mov	EBX, multiply

 000001B1			_start_loop:
 000001B1  FD			  STD
 000001B2  AC			  LODSB
 000001B3  3C 30		  cmp	AL, 48
 000001B5  7C 32		  jl	_check_sign
 000001B7  3C 39		  cmp	AL, 57
 000001B9  7F 4D		  jg	_invalid
 000001BB  2C 30		  sub	AL, 48
 000001BD  8A D8		  mov	BL, AL
 000001BF  B8 00000000		  mov	EAX, 0			;set EAX to 0 to prepare for moving previous contents of AL into EAX to multiply
 000001C4  0F BE C3		  movsx	EAX, BL
 000001C7  8B 5D F8		  mov	EBX, multiply		; multiply by decimal place one, ten, hundred, etc
 000001CA  F7 E3		  mul	EBX
 000001CC  72 3A		  jc	_invalid			; check if carry flag was set
 000001CE  03 07		  add	EAX, [EDI]
 000001D0  78 36		  js	_invalid			; check if overflow flag was set
 000001D2  89 07		  mov	[EDI], EAX
 000001D4			 _continue:
 000001D4  49			  dec	ECX
 000001D5  83 F9 00		  cmp	ECX, 0
 000001D8  74 5A		  je	_switch_sign
 000001DA  8B 45 F8		  mov	EAX, multiply
 000001DD  BB 0000000A		  mov	EBX, 10
 000001E2  F7 E3		  mul	EBX
 000001E4  89 45 F8		  mov	multiply, EAX
 000001E7  EB C8		  jmp	_start_loop


 000001E9			_check_sign:
 000001E9  83 F9 01		  cmp	ECX, 1
 000001EC  75 1A		  jne	_invalid
 000001EE  3C 2D		  cmp	AL, 45
 000001F0  75 09		  jne	_check_pos
 000001F2  C7 45 FC		  mov	signFlag, 1
	   00000001
 000001F9  EB D9		  jmp	_continue

 000001FB			_check_pos:
 000001FB  3C 2B		  cmp	AL, 43
 000001FD  75 09		  jne	_invalid
 000001FF  C7 45 FC		  mov	signFlag, 0
	   00000000
 00000206  EB CC		  jmp	_continue

 00000208			_invalid:
 00000208  3D 80000000		  cmp	EAX, -2147483648			; check for edge case- this number is valid
 0000020D  74 33		  je	_edge_case
				  mGetString	[EBP + 28], [EBP + 16], [EBP + 12], [EBP + 8]
 0000020F  50		     1	  push	EAX
 00000210  51		     1	  push	ECX
 00000211  52		     1	  push	EDX
 00000212  57		     1	  push	EDI
 00000213  8B 55 1C	     1	  mov	EDX, [EBP + 28]
 00000216  E8 00000000 E     1	  call	WriteString
 0000021B  8B 4D 0C	     1	  mov	ECX, [EBP + 12]
 0000021E  8B 55 10	     1	  mov	EDX, [EBP + 16]
 00000221  E8 00000000 E     1	  call	ReadString
 00000226  8B 7D 08	     1	  mov	EDI, [EBP + 8]
 00000229  89 07	     1	  mov	[EDI], EAX
 0000022B  5F		     1	  pop	EDI
 0000022C  5A		     1	  pop	EDX
 0000022D  59		     1	  pop	ECX
 0000022E  58		     1	  pop	EAX
 0000022F  E9 FFFFFF57		  jmp	_start_over

 00000234			_switch_sign:
 00000234  83 7D FC 00		  cmp	signFlag, 0
 00000238  74 0A		  je	_done
 0000023A  8B 07		  mov	EAX, [EDI]
 0000023C  F7 D8		  neg	EAX
 0000023E  89 07		  mov	[EDI], EAX
 00000240  EB 02		  jmp	_done
				  
 00000242			_edge_case:
 00000242  89 07		  mov	[EDI], EAX

 00000244			_done:

 00000244  5E			  pop	ESI
 00000245  5F			  pop	EDI
 00000246  5A			  pop	EDX
 00000247  59			  pop	ECX
 00000248  5B			  pop	EBX
 00000249  58			  pop	EAX
 0000024A  C9		   *	    leave  
 0000024B  C2 0018		  ret	24
 0000024E			ReadVal ENDP

				; ------------------------------------------------------------
				; name: WriteVal
				;
				; description: Takes an integer value to convert to ASCII and a string to place it in. Displays the string.
				;
				; preconditions: ebp+8 = value in listNums, ebp+12 = string2
				;
				; postconditions: registers preserved. string is updated but will be overwritten in future calls.
				;
				; receives: numeric SDWORD value (listNums)
				;
				; returns: displays an integer in string (ascii) form
				; ---------------------------------------------------------------
 0000024E			WriteVal PROC
				  LOCAL	divide: DWORD, quotient: SDWORD, signFlag: DWORD 		; signFlag 0 for positive, 1 for negative
 0000024E  55		   *	    push   ebp
 0000024F  8B EC	   *	    mov    ebp, esp
 00000251  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000254  50			  push	EAX
 00000255  53			  push	EBX
 00000256  51			  push	ECX
 00000257  52			  push	EDX
 00000258  57			  push	EDI
 00000259  56			  push	ESI
				; ---------------------------------------------------------
				; WriteVal takes as parameters an integer value and a string to write
				; the converted number. Uses ECX to keep track of the number of values stored.
				; Pushes 0 first, then values in reverse order by dividing integer by 10 and 
				; pushing the converted ASCII remainder. Uses STOSB to then pop the ASCII
				; values off the stack in correct order, using ECX to know when to stop, ending
				; with null terminator 0. Calls macro mDisplayString to display the string.
				; ---------------------------------------------------------
				  
 0000025A  C7 45 F4		  mov	signFlag, 0
	   00000000
 00000261  C7 45 FC		  mov	divide, 10
	   0000000A
 00000268  8B 75 08		  mov	ESI, [EBP + 8]
 0000026B  8B 7D 0C		  mov	EDI, [EBP + 12]
 0000026E  89 75 F8		  mov	quotient, ESI
 00000271  B9 00000001		  mov	ECX, 1   ;will count the created string, starting at 1 to account for pushed 0 below
 00000276  FC			  cld

				;push a null byte so string will end after correct number of values stored
 00000277  B8 00000000		  mov	EAX, 0
 0000027C  50			  push	EAX
 0000027D			_saveSign:
 0000027D  8B C6		  mov	EAX, ESI
 0000027F  83 F8 00		  cmp	EAX, 0
 00000282  7D 07		  jge	_convertInt
				;check if int is negative, set signFlag
 00000284  C7 45 F4		  mov	signFlag, 1
	   00000001

 0000028B			_convertInt:
 0000028B  8B 45 F8		  mov	EAX, quotient
 0000028E  99			  cdq
 0000028F  8B 5D FC		  mov	EBX, divide
 00000292  F7 FB		  idiv	EBX
				;save quotient for next division
 00000294  89 45 F8		  mov	quotient, EAX
				;check if remainder is negative and neg
 00000297  8B C2		  mov	EAX, EDX
 00000299  83 F8 00		  cmp	EAX, 0
 0000029C  7D 02		  jge	_toAscii
 0000029E  F7 D8		  neg	EAX
				;convert remainder to ascii by adding 48
 000002A0			_toAscii:
 000002A0  83 C0 30		  add	EAX, 48
 000002A3  50			  push	EAX			;save in register
 000002A4  41			  inc	ECX
				;check if quotient is zero (number is done), if not continue loop
 000002A5  8B 45 F8		  mov	EAX, quotient
 000002A8  83 F8 00		  cmp	EAX, 0
 000002AB  75 DE		  jne	_convertInt

				;check if we need to add a negative sign
 000002AD  83 7D F4 01		  cmp	signFlag, 1
 000002B1  75 06		  jne	_popAscii
 000002B3  B8 0000002D		  mov	EAX, 45
 000002B8  AA			  STOSB
				  

				;add values to string list
 000002B9			_popAscii:  
 000002B9  58			  pop	EAX
 000002BA  AA			  STOSB
 000002BB  49			  dec	ECX
 000002BC  83 F9 00		  cmp	ECX, 0
 000002BF  7F F8		  jg	_popAscii

				  mDisplayString	[EBP + 12]
 000002C1  50		     1	  push	EAX
 000002C2  52		     1	  push	EDX
 000002C3  8B 55 0C	     1	  mov	EDX, [EBP + 12]
 000002C6  E8 00000000 E     1	  call	WriteString
 000002CB  5A		     1	  pop EDX
 000002CC  58		     1	  pop EAX

 000002CD  5E			  pop	ESI
 000002CE  5F			  pop	EDI
 000002CF  5A			  pop	EDX
 000002D0  59			  pop	ECX
 000002D1  5B			  pop	EBX
 000002D2  58			  pop	EAX
 000002D3  C9		   *	    leave  
 000002D4  C2 0008		  ret	8
 000002D7			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/11/22 15:50:30
5String Primitives and Macros     (Proj6_clarkeab.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000151 _TEXT	Length= 000000FD Public STDCALL
  signFlag . . . . . . . . . . .	DWord	 bp - 00000004
  multiply . . . . . . . . . . .	DWord	 bp - 00000008
  _start_over  . . . . . . . . .	L Near	 0000018B _TEXT	
  _start_loop  . . . . . . . . .	L Near	 000001B1 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001D4 _TEXT	
  _check_sign  . . . . . . . . .	L Near	 000001E9 _TEXT	
  _check_pos . . . . . . . . . .	L Near	 000001FB _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000208 _TEXT	
  _switch_sign . . . . . . . . .	L Near	 00000234 _TEXT	
  _edge_case . . . . . . . . . .	L Near	 00000242 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 00000244 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000024E _TEXT	Length= 00000089 Public STDCALL
  divide . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  signFlag . . . . . . . . . . .	DWord	 bp - 0000000C
  _saveSign  . . . . . . . . . .	L Near	 0000027D _TEXT	
  _convertInt  . . . . . . . . .	L Near	 0000028B _TEXT	
  _toAscii . . . . . . . . . . .	L Near	 000002A0 _TEXT	
  _popAscii  . . . . . . . . . .	L Near	 000002B9 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000151 Public STDCALL
  _get10Nums . . . . . . . . . .	L Near	 0000001D _TEXT	
  _display10Nums . . . . . . . .	L Near	 0000007C _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 000000C7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	DWord	 000002DC _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 00000283 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodBye  . . . . . . . . . . . .	Byte	 0000048F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listNums . . . . . . . . . . . .	Byte	 000001AF _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
newInt . . . . . . . . . . . . .	DWord	 0000027F _DATA	
numAvg . . . . . . . . . . . . .	DWord	 00000343 _DATA	
numSum . . . . . . . . . . . . .	DWord	 0000033F _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sLength  . . . . . . . . . . . .	DWord	 0000027B _DATA	
sMax . . . . . . . . . . . . . .	DWord	 00000277 _DATA	
string1  . . . . . . . . . . . .	Byte	 0000001F _DATA	
string2  . . . . . . . . . . . .	Byte	 000000E7 _DATA	
titleinstr . . . . . . . . . . .	Byte	 00000347 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yourAvg  . . . . . . . . . . . .	Byte	 00000324 _DATA	
yourNums . . . . . . . . . . . .	Byte	 000002E0 _DATA	
yourSum  . . . . . . . . . . . .	Byte	 00000306 _DATA	

	   0 Warnings
	   0 Errors
