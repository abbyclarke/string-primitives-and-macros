Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/10/22 23:02:59
5String Primitives and Macros     (Proj6_clarkeab.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_clarkeab.asm)

				; Author: Abby Clarke 
				; Last Modified: 3/7/2022
				; OSU email address: clarkeab@oregonstate.edu
				; Course number/section:   CS271 Section 02
				; Project Number: 6                Due Date: 3/13/2022
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				; -------------------------------------------------------------------
				; Name: mGetString
				;
				; Description:
				;
				; Preconditions:
				;
				; Receives: prompt (Offset of a prompt), userString (offset of empty string), size (length of string- input value), bytesRead (offset)
				;
				; Returns:
				; -------------------------------------------------------------------
				mGetString	MACRO prompt, userString, size, bytesRead
				  push	EAX
				  push	ECX
				  push	EDX
				  push	EDI
				  
				  mov	EDX, prompt
				  call	WriteString
				  mov	ECX, size
				  mov	EDX, userString
				  call	ReadString
				  mov	EDI, bytesRead
				  mov	[EDI], EAX

				  pop	EDI
				  pop	EDX
				  pop	ECX
				  pop	EAX
				ENDM

				; -------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Description:
				;
				; Preconditions:
				;
				; Receives: printString (Offset of string to be printed)
				;
				; Returns:
				; -------------------------------------------------------------------
				mDisplayString	MACRO	printString
				  push	EAX
				  push	EDX

				  mov	EDX, printString
				  call	WriteString

				  pop EDX
				  pop EAX
				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 50 6C 65 61 73	prompt1		BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000001F  00000020 [		string1		BYTE	32 DUP(?)
	    00
	   ]
 0000003F  00000020 [		string2		BYTE	32 DUP(?)
	    00
	   ]
 0000005F  00000020 [		string3		BYTE	32 DUP(?)
	    00
	   ]
 0000007F  00000020 [		listNums	BYTE	32 DUP(?)
	    00
	   ]
 0000009F 00000020		sMax		DWORD	32
 000000A3 00000000		sLength		DWORD	?
 000000A7 00000000		newInt		SDWORD	?
 000000AB 45 52 52 4F 52	errorMsg	BYTE	"ERROR: You did not enter a signed number of your number was too big.", 13,10
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
 000000F1  50 6C 65 61 73				BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000104 00000000		counter		DWORD	?
 00000108 59 6F 75 20 65	yourNums	BYTE	"You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00



				; (insert variable definitions here)

 00000000			.code
 00000000			main PROC
				  
 00000000  C7 05 00000104 R	  mov	counter, 4
	   00000004
 0000000A  BF 0000007F R	  mov	EDI, OFFSET listNums
 0000000F			_get10Nums:
 0000000F  68 000000AB R	  push	OFFSET errorMsg
 00000014  68 000000A7 R	  push	OFFSET newInt
 00000019  68 00000000 R	  push	OFFSET prompt1
 0000001E  68 0000001F R	  push	OFFSET string1
 00000023  FF 35 0000009F R	  push	sMax
 00000029  68 000000A3 R	  push	OFFSET sLength
 0000002E  E8 0000006E		  call	ReadVal
				;add integer to list of 10 integers from user
 00000033  A1 000000A7 R	  mov	EAX, newInt
 00000038  89 07		  mov	[EDI], EAX
 0000003A  83 C7 04		  add	EDI, 4
 0000003D  FF 0D 00000104 R	  dec	counter
 00000043  83 3D 00000104 R	  cmp	counter, 0
	   00
 0000004A  7F C3		  jg	_get10Nums

				;display the integers  
 0000004C  BA 00000108 R	  mov	EDX, OFFSET yourNums
 00000051  E8 00000000 E	  call	WriteString
				;convert each int in listNums to ascii string
 00000056  BE 0000007F R	  mov	ESI, OFFSET listNums
 0000005B  C7 05 00000104 R	  mov	counter, 4
	   00000004
 00000065			_display10Nums:
 00000065  8B 06		  mov	EAX, [ESI]
 00000067  A3 000000A7 R	  mov	newInt, EAX
 0000006C  68 0000005F R	  push	OFFSET string3
 00000071  68 0000003F R	  push	OFFSET string2
 00000076  FF 35 000000A7 R	  push	newInt
 0000007C  E8 0000011D		  call	WriteVal
 00000081  B0 20		  mov	AL, 32
 00000083  E8 00000000 E	  call	WriteChar
 00000088  83 C6 04		  add	ESI, 4
 0000008B  FF 0D 00000104 R	  dec	counter
 00000091  83 3D 00000104 R	  cmp	counter, 0
	   00
 00000098  7F CB		  jg	_display10Nums



				  
				  
				  
				  

					Invoke ExitProcess,0	; exit to operating system
 0000009A  6A 00	   *	    push   +000000000h
 0000009C  E8 00000000 E   *	    call   ExitProcess
 000000A1			main ENDP


				; ------------------------------------------------------------
				; name: ReadVal

				; description: ReadVal uses mGetString maco to get user input in form of a string of digits. It converts the string of 
				; ascii digits to its numeric value representation in a SDOWRD. It validates the user's input is a valid number (no letters, symbols)
				; and ensures it fits in an SDWORD without overflow.
				;
				; preconditions: ebp+8 = Offset sLength, ebp+12 = sMax, ebp+16 = offset string1, ebp+20=offset prompt1, ebp+24=offset newInt,
				; ebp+28= offset errorMsg
				;
				; postconditions: newInt value changed. registers preserved.
				;
				; receives: (listed above) offset sLength, sMax, offset string1, offset prompt1, offset newInt, offset errorMsg
				;
				; returns: converted value in SDWORD newInt
				; ---------------------------------------------------------------
 000000A1			ReadVal PROC
				  LOCAL	signFlag: DWORD, multiply: DWORD			; signFlag: 0 for positive, 1 for negative
 000000A1  55		   *	    push   ebp
 000000A2  8B EC	   *	    mov    ebp, esp
 000000A4  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000000A7  50			  push	EAX
 000000A8  53			  push	EBX
 000000A9  51			  push	ECX
 000000AA  52			  push	EDX
 000000AB  57			  push	EDI
 000000AC  56			  push	ESI
 000000AD  C7 45 FC		  mov	signFlag, 0
	   00000000
 000000B4  C7 45 F8		  mov	multiply, 1									; will increase by 10s
	   00000001
				  mGetString	[EBP + 20], [EBP + 16], [EBP + 12], [EBP + 8]
 000000BB  50		     1	  push	EAX
 000000BC  51		     1	  push	ECX
 000000BD  52		     1	  push	EDX
 000000BE  57		     1	  push	EDI
 000000BF  8B 55 14	     1	  mov	EDX, [EBP + 20]
 000000C2  E8 00000000 E     1	  call	WriteString
 000000C7  8B 4D 0C	     1	  mov	ECX, [EBP + 12]
 000000CA  8B 55 10	     1	  mov	EDX, [EBP + 16]
 000000CD  E8 00000000 E     1	  call	ReadString
 000000D2  8B 7D 08	     1	  mov	EDI, [EBP + 8]
 000000D5  89 07	     1	  mov	[EDI], EAX
 000000D7  5F		     1	  pop	EDI
 000000D8  5A		     1	  pop	EDX
 000000D9  59		     1	  pop	ECX
 000000DA  58		     1	  pop	EAX
				  
 000000DB			_start_over:  
 000000DB  C7 45 F8		  mov	multiply, 1
	   00000001
 000000E2  C7 45 FC		  mov	signFlag, 0
	   00000000
 000000E9  8B 55 08		  mov	EDX, [EBP + 8]
 000000EC  8B 0A		  mov	ECX, [EDX]
 000000EE  8B 75 10		  mov	ESI, [EBP + 16]
 000000F1  03 F1		  add	ESI, ECX
 000000F3  4E			  dec	ESI
 000000F4  8B 7D 18		  mov	EDI, [EBP + 24]
 000000F7  B8 00000000		  mov	EAX, 0
 000000FC  89 07		  mov	[EDI], EAX
 000000FE  8B 5D F8		  mov	EBX, multiply

 00000101			_start_loop:
 00000101  FD			  STD
 00000102  AC			  LODSB
 00000103  3C 30		  cmp	AL, 48
 00000105  7C 32		  jl	_check_sign
 00000107  3C 39		  cmp	AL, 57
 00000109  7F 4D		  jg	_invalid
 0000010B  2C 30		  sub	AL, 48
 0000010D  8A D8		  mov	BL, AL
 0000010F  B8 00000000		  mov	EAX, 0			;set EAX to 0 to prepare for moving previous contents of AL into EAX to multiply
 00000114  0F BE C3		  movsx	EAX, BL
 00000117  8B 5D F8		  mov	EBX, multiply		; multiply by decimal place one, ten, hundred, etc
 0000011A  F7 E3		  mul	EBX
 0000011C  72 3A		  jc	_invalid			; check if carry flag was set
 0000011E  03 07		  add	EAX, [EDI]
 00000120  78 36		  js	_invalid			; check if overflow flag was set
 00000122  89 07		  mov	[EDI], EAX
 00000124			 _continue:
 00000124  49			  dec	ECX
 00000125  83 F9 00		  cmp	ECX, 0
 00000128  74 5A		  je	_switch_sign
 0000012A  8B 45 F8		  mov	EAX, multiply
 0000012D  BB 0000000A		  mov	EBX, 10
 00000132  F7 E3		  mul	EBX
 00000134  89 45 F8		  mov	multiply, EAX
 00000137  EB C8		  jmp	_start_loop


 00000139			_check_sign:
 00000139  83 F9 01		  cmp	ECX, 1
 0000013C  75 1A		  jne	_invalid
 0000013E  3C 2D		  cmp	AL, 45
 00000140  75 09		  jne	_check_pos
 00000142  C7 45 FC		  mov	signFlag, 1
	   00000001
 00000149  EB D9		  jmp	_continue

 0000014B			_check_pos:
 0000014B  3C 2B		  cmp	AL, 43
 0000014D  75 09		  jne	_invalid
 0000014F  C7 45 FC		  mov	signFlag, 0
	   00000000
 00000156  EB CC		  jmp	_continue

 00000158			_invalid:
 00000158  3D 80000000		  cmp	EAX, -2147483648			; check for edge case- this number is valid
 0000015D  74 33		  je	_edge_case
				  mGetString	[EBP + 28], [EBP + 16], [EBP + 12], [EBP + 8]
 0000015F  50		     1	  push	EAX
 00000160  51		     1	  push	ECX
 00000161  52		     1	  push	EDX
 00000162  57		     1	  push	EDI
 00000163  8B 55 1C	     1	  mov	EDX, [EBP + 28]
 00000166  E8 00000000 E     1	  call	WriteString
 0000016B  8B 4D 0C	     1	  mov	ECX, [EBP + 12]
 0000016E  8B 55 10	     1	  mov	EDX, [EBP + 16]
 00000171  E8 00000000 E     1	  call	ReadString
 00000176  8B 7D 08	     1	  mov	EDI, [EBP + 8]
 00000179  89 07	     1	  mov	[EDI], EAX
 0000017B  5F		     1	  pop	EDI
 0000017C  5A		     1	  pop	EDX
 0000017D  59		     1	  pop	ECX
 0000017E  58		     1	  pop	EAX
 0000017F  E9 FFFFFF57		  jmp	_start_over

 00000184			_switch_sign:
 00000184  83 7D FC 00		  cmp	signFlag, 0
 00000188  74 0A		  je	_done
 0000018A  8B 07		  mov	EAX, [EDI]
 0000018C  F7 D8		  neg	EAX
 0000018E  89 07		  mov	[EDI], EAX
 00000190  EB 02		  jmp	_done
				  
 00000192			_edge_case:
 00000192  89 07		  mov	[EDI], EAX

 00000194			_done:

 00000194  5E			  pop	ESI
 00000195  5F			  pop	EDI
 00000196  5A			  pop	EDX
 00000197  59			  pop	ECX
 00000198  5B			  pop	EBX
 00000199  58			  pop	EAX
 0000019A  C9		   *	    leave  
 0000019B  C2 0018		  ret	24
 0000019E			ReadVal ENDP

				; ------------------------------------------------------------
				; name: WriteVal
				;
				; description: 
				;
				; preconditions: ebp+8 = value in listNums, ebp+12 = offset of string2, ebp+16 = offset of string3
				;
				; postconditions: 
				;
				; receives: numeric SDOWRD value (listNums), offset of a string, offset of a string
				;
				; returns: 
				; ---------------------------------------------------------------
 0000019E			WriteVal PROC
				  LOCAL	divide: DWORD, quotient: SDWORD, signFlag: DWORD		; signFlag 0 for positive, 1 for negative
 0000019E  55		   *	    push   ebp
 0000019F  8B EC	   *	    mov    ebp, esp
 000001A1  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000001A4  50			  push	EAX
 000001A5  53			  push	EBX
 000001A6  51			  push	ECX
 000001A7  52			  push	EDX
 000001A8  57			  push	EDI
 000001A9  56			  push	ESI
 000001AA  C7 45 F4		  mov	signFlag, 0
	   00000000
 000001B1  C7 45 FC		  mov	divide, 10
	   0000000A
 000001B8  8B 75 08		  mov	ESI, [EBP + 8]
 000001BB  8B 7D 0C		  mov	EDI, [EBP + 12]
 000001BE  89 75 F8		  mov	quotient, ESI
 000001C1  B9 00000000		  mov	ECX, 0   ;will count the created string
 000001C6  FC			  cld

 000001C7			_saveSign:
 000001C7  8B C6		  mov	EAX, ESI
 000001C9  83 F8 00		  cmp	EAX, 0
 000001CC  7D 07		  jge	_convertInt
				;check if int is negative, set signFlag
 000001CE  C7 45 F4		  mov	signFlag, 1
	   00000001

 000001D5			_convertInt:
 000001D5  8B 45 F8		  mov	EAX, quotient
 000001D8  99			  cdq
 000001D9  8B 5D FC		  mov	EBX, divide
 000001DC  F7 FB		  idiv	EBX
				;save quotient for next division
 000001DE  89 45 F8		  mov	quotient, EAX
				;check if remainder is negative and neg
 000001E1  8B C2		  mov	EAX, EDX
 000001E3  83 F8 00		  cmp	EAX, 0
 000001E6  7D 02		  jge	_toAscii
 000001E8  F7 D8		  neg	EAX
				;convert remainder to ascii by adding 48
 000001EA			_toAscii:
 000001EA  83 C0 30		  add	EAX, 48
				;add to list
 000001ED  AA			  STOSB
 000001EE  41			  inc	ECX
				;check if quotient is zero (number is done), if not continue loop
 000001EF  8B 45 F8		  mov	EAX, quotient
 000001F2  83 F8 00		  cmp	EAX, 0
 000001F5  75 DE		  jne	_convertInt
				;check if we need to add a negative sign
 000001F7  83 7D F4 01		  cmp	signFlag, 1
 000001FB  75 07		  jne	_reverseList
 000001FD  B8 0000002D		  mov	EAX, 45
 00000202  AA			  STOSB
 00000203  41			  inc	ECX

 00000204			_reverseList:
 00000204  8B 75 0C		  mov	ESI, [EBP + 12]	;newly created string
 00000207  03 F1		  add	ESI, ECX	;start at end of string
 00000209  4E			  dec	ESI
 0000020A  8B 7D 10		  mov	EDI, [EBP + 16] ;empty string for reverse

 0000020D			_revLOOP:
 0000020D  FD			  STD
 0000020E  AC			  LODSB
 0000020F  FC			  CLD
 00000210  AA			  STOSB
 00000211  E2 FA		  LOOP	_revLoop

				  mDisplayString	[EBP + 16]
 00000213  50		     1	  push	EAX
 00000214  52		     1	  push	EDX
 00000215  8B 55 10	     1	  mov	EDX, [EBP + 16]
 00000218  E8 00000000 E     1	  call	WriteString
 0000021D  5A		     1	  pop EDX
 0000021E  58		     1	  pop EAX

 0000021F  5E			  pop	ESI
 00000220  5F			  pop	EDI
 00000221  5A			  pop	EDX
 00000222  59			  pop	ECX
 00000223  5B			  pop	EBX
 00000224  58			  pop	EAX
 00000225  C9		   *	    leave  
 00000226  C2 000C		  ret	12
 00000229			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/10/22 23:02:59
5String Primitives and Macros     (Proj6_clarkeab.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000012E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000229 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A1 _TEXT	Length= 000000FD Public STDCALL
  signFlag . . . . . . . . . . .	DWord	 bp - 00000004
  multiply . . . . . . . . . . .	DWord	 bp - 00000008
  _start_over  . . . . . . . . .	L Near	 000000DB _TEXT	
  _start_loop  . . . . . . . . .	L Near	 00000101 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000124 _TEXT	
  _check_sign  . . . . . . . . .	L Near	 00000139 _TEXT	
  _check_pos . . . . . . . . . .	L Near	 0000014B _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000158 _TEXT	
  _switch_sign . . . . . . . . .	L Near	 00000184 _TEXT	
  _edge_case . . . . . . . . . .	L Near	 00000192 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 00000194 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000019E _TEXT	Length= 0000008B Public STDCALL
  divide . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  signFlag . . . . . . . . . . .	DWord	 bp - 0000000C
  _saveSign  . . . . . . . . . .	L Near	 000001C7 _TEXT	
  _convertInt  . . . . . . . . .	L Near	 000001D5 _TEXT	
  _toAscii . . . . . . . . . . .	L Near	 000001EA _TEXT	
  _reverseList . . . . . . . . .	L Near	 00000204 _TEXT	
  _revLOOP . . . . . . . . . . .	L Near	 0000020D _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A1 Public STDCALL
  _get10Nums . . . . . . . . . .	L Near	 0000000F _TEXT	
  _display10Nums . . . . . . . .	L Near	 00000065 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	DWord	 00000104 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 000000AB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listNums . . . . . . . . . . . .	Byte	 0000007F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
newInt . . . . . . . . . . . . .	DWord	 000000A7 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sLength  . . . . . . . . . . . .	DWord	 000000A3 _DATA	
sMax . . . . . . . . . . . . . .	DWord	 0000009F _DATA	
string1  . . . . . . . . . . . .	Byte	 0000001F _DATA	
string2  . . . . . . . . . . . .	Byte	 0000003F _DATA	
string3  . . . . . . . . . . . .	Byte	 0000005F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yourNums . . . . . . . . . . . .	Byte	 00000108 _DATA	

	   0 Warnings
	   0 Errors
